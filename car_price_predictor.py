# -*- coding: utf-8 -*-
"""Car Price Predictor.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1l_ry_EG7XcFR3D1g8ywHjDXwtXMAabJV

#Import Required Libraries
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl
# %matplotlib inline
mpl.style.use('ggplot')

car=pd.read_csv('/content/quikr_car.csv')

car.head()

car.shape

car.info()

#Creating backup copy
backup=car.copy()

"""#Cleaning Data"""

#The “year” column contains many non-year values.
car=car[car['year'].str.isnumeric()]

#Convert the ‘year’ column from object to integer type.
car['year']=car['year'].astype(int)

#The “Price” column contains entries labeled “Ask For Price”. Remove those rows.
car = car[car['Price'] != 'Ask For Price']

#The “Price” column contains commas and is of object type. Remove the commas and convert it to integer.
car['Price'] = car['Price'].str.replace(',', '', regex=True).astype(int)

#The “kms_driven” column contains object values ending with the word “kms”. Extract the numeric part and remove commas.
car['kms_driven']=car['kms_driven'].str.split().str.get(0).str.replace(',','')

#The “kms_driven” column contains NaN values and two rows with the string “Petrol”. Keep only numeric values and convert the column to integer.
car=car[car['kms_driven'].str.isnumeric()]
car['kms_driven']=car['kms_driven'].astype(int)

#The “fuel_type” column contains NaN values.
car=car[~car['fuel_type'].isna()]

car.shape

#For the “name” column, keep only the first three words of each car name.
car['name']=car['name'].str.split().str.slice(start=0,stop=3).str.join(' ')

#Reset the index of the final cleaned dataset.
car=car.reset_index(drop=True)

#Cleaned Data
car.head()

#save the cleaned car data
car.to_csv('Cleaned_Car_data.csv')

car.info()

car.describe(include='all')

car['company'].unique()

"""#Visualization

"""

import seaborn as sns

#Check the relationship between “Company” and “Price”
plt.subplots(figsize=(15,7))
ax=sns.boxplot(x='company',y='Price',data=car)
ax.set_xticklabels(ax.get_xticklabels(),rotation=40,ha='right')
plt.show()

#Check the relationship between “Year” and “Price”
plt.subplots(figsize=(20,10))
ax=sns.swarmplot(x='year',y='Price',data=car)
ax.set_xticklabels(ax.get_xticklabels(),rotation=40,ha='right')
plt.show()

#Check the relationship between “kms_driven” and “Price”
sns.relplot(x='kms_driven',y='Price',data=car,height=7,aspect=1.5)

#Check the relationship between “fuel_type” and “Price”
plt.subplots(figsize=(14,7))
sns.boxplot(x='fuel_type',y='Price',data=car)

#Check the relationship between “Company”, “Price”, "fuel_type" and "year"
ax=sns.relplot(x='company',y='Price',data=car,hue='fuel_type',size='year',height=7,aspect=2)
ax.set_xticklabels(rotation=40,ha='right')

"""#Training the data"""

#Extracting Training Data
X=car[['name','company','year','kms_driven','fuel_type']]
y=car['Price']

X

y.shape

#Apply train-test split to the dataset.
from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2)

"""#Model Fitting"""

from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import make_column_transformer
from sklearn.pipeline import make_pipeline
from sklearn.metrics import r2_score

#Create a OneHotEncoder object to encode all possible categorical values.
ohe=OneHotEncoder()
ohe.fit(X[['name','company','fuel_type']])

#Create a ColumnTransformer to apply transformations to categorical columns.
column_trans=make_column_transformer((OneHotEncoder(categories=ohe.categories_),['name','company','fuel_type']),
                                    remainder='passthrough')

#Linear Regression Model
lr=LinearRegression()

#Create a machine learning pipeline to streamline preprocessing and model training.
pipe=make_pipeline(column_trans,lr)

#Fit the model to the training data.
pipe.fit(X_train,y_train)

y_pred=pipe.predict(X_test)

"""#Evaluate the model performance"""

#Evaluate the model performance using the (R-squared) score
r2_score(y_test,y_pred)

scores=[]
for i in range(1000):
    X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.1,random_state=i)
    lr=LinearRegression()
    pipe=make_pipeline(column_trans,lr)
    pipe.fit(X_train,y_train)
    y_pred=pipe.predict(X_test)
    scores.append(r2_score(y_test,y_pred))

#index of the maximum value(247th split (indexing starts at 0) gave the best R² score.)
np.argmax(scores)

#maximum R² score
scores[np.argmax(scores)]

"""#Predict price of Car"""

pipe.predict(pd.DataFrame(columns=X_test.columns,data=np.array(['Maruti Suzuki Swift','Maruti',2019,100,'Petrol']).reshape(1,5)))

"""#Save the trained model using the pickle library."""

import pickle

pickle.dump(pipe,open('LinearRegressionTrainModel.pkl','wb'))

#predict
pipe.predict(pd.DataFrame(columns=['name','company','year','kms_driven','fuel_type'],data=np.array(['Maruti Suzuki Swift','Maruti',2019,100,'Petrol']).reshape(1,5)))

# Accessing the first categorical column's unique categories
pipe.steps[0][1].transformers[0][1].categories[0]

